package project.standroid.myapplication;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.media.AudioManager;
import android.media.ToneGenerator;
import android.net.ConnectivityManager;
import android.net.TrafficStats;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.StrictMode;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.material.expandable.ExpandableWidgetHelper;
import com.mysql.jdbc.Statement;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class CreateCase extends AppCompatActivity {
    String SupplierId, SupplierRegistrationNo, BrandId, LabelId, UnitId, FinancialYear, Mfg_dt, Batch_no, Label1, Label4, BottlingPlant_Ids;
    SharedPreferences sharedpreferences;
    SharedPreferences.Editor editor;
    String SelectedTypes;
    String NoOfBottles;
    TextView label1, label4, case_pallete_label,label5;
    String scanHGs = "";
    EditText scanHG;
    ArrayList ScannedArray;
    private RecyclerView recyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager layoutManager;
    String CurrentDateTime;
    TextView errorLabel,countCase;
    String rev_palette_nos, rev_sizes, rev_ids, rev_palette_status, rev_BrandId, rev_LabelId, rev_UnitId, activities, caseCount;
    LinearLayout rev_layout;
    int countSize;
    Button CLEARBUTTON;


    ProgressBar progressBar;
    private Connection connection = null;
    SharedPreferences sharedPreferences;
    String sqlips, sqlports, sqldatabases, sqlusernames, sqlpasswords;
    String back;
    Intent intent;
    String BottlingPlant_Idss;
    long executionTime;
    NetworkChangeListener networkChangeListener = new NetworkChangeListener();



    @Override
    // lifecycle of android activity. It is called when the activity is first created, like example using this method we connect our activity design
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_case);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setTitle("Create Case");

        //initialization
        label1 = findViewById(R.id.label1);
        label4 = findViewById(R.id.label4);
        countCase = findViewById(R.id.countCase);
//        label5 = findViewById(R.id.label5);
        scanHG = findViewById(R.id.scanHG);
        errorLabel = findViewById(R.id.errorLabel);
        recyclerView = (RecyclerView) findViewById(R.id.recyclerview);
        ScannedArray = new ArrayList();
        rev_layout = (LinearLayout) findViewById(R.id.rev_linear4);
        case_pallete_label = (TextView) findViewById(R.id.rev_label4);
        progressBar = findViewById(R.id.ProgressBar);

        //getting data from shared preference
        sharedpreferences = getSharedPreferences(MainActivity.MyPREFERENCES, Context.MODE_PRIVATE);
        editor = sharedpreferences.edit();
        SelectedTypes = sharedpreferences.getString("SelectedType", "foreign liquor");
        sharedPreferences = getSharedPreferences("SQLSERVER", Context.MODE_PRIVATE);
        sqlips = sharedPreferences.getString("sqlip", "");
        sqlports = sharedPreferences.getString("sqlports", "");
        sqlusernames = sharedPreferences.getString("sqlusernames", "");
        sqlpasswords = sharedPreferences.getString("sqlpasswords", "");
        sqldatabases = sharedPreferences.getString("sqldatabases", "");
        BottlingPlant_Idss = sharedPreferences.getString("BottlingPlant_Idss","");
        // getting data from another activity
        System.out.print("qqqq"+BottlingPlant_Idss);
        intent = getIntent();
        if (SelectedTypes.equals("foreign liquor")) {
            BrandId = intent.getStringExtra("BrandId");
        }
        back = intent.getStringExtra("back");
        SupplierId = intent.getStringExtra("SupplierId");
        SupplierRegistrationNo = intent.getStringExtra("SupplierRegistrationNo");

        LabelId = intent.getStringExtra("LabelId");
        UnitId = intent.getStringExtra("UnitId");
        // if(back == null){
        scanHG.requestFocus();
        NoOfBottles = intent.getStringExtra("NoOfBottles");
        BottlingPlant_Ids = intent.getStringExtra("BottlingPlant_Id");

        //   }else{
        NoOfBottles = intent.getStringExtra("NoOfBottles");
        BottlingPlant_Ids = intent.getStringExtra("BottlingPlant_Id");
        System.out.println("kkkk"+BottlingPlant_Ids);
        //   }
        FinancialYear = intent.getStringExtra("FinancialYear");
        Mfg_dt = intent.getStringExtra("Mfg_dt");
        Batch_no = intent.getStringExtra("Batch_no");
        Label1 = intent.getStringExtra("Label1");
        Label4 = intent.getStringExtra("Label4");

        label1.setText(Label1);
        label4.setText( Label4);
        scanHG.requestFocus();

        activities = intent.getStringExtra("activities");
        if(activities.equals("reverse_scanning")){
            rev_palette_nos = intent.getStringExtra("rev_palette_nos");
            rev_sizes = intent.getStringExtra("rev_sizes");
            rev_ids = intent.getStringExtra("rev_ids");
            rev_palette_status = intent.getStringExtra("rev_palette_status");
            rev_BrandId = intent.getStringExtra("rev_BrandId");
            rev_LabelId = intent.getStringExtra("rev_LabelId");
            rev_UnitId = intent.getStringExtra("rev_UnitId");
            countSize = intent.getIntExtra("countSize",0);
        }
        getCaseCount();
        // used for blocking the keyboard

        // mc 36 and tc 21

        //Use OnTouchListener when you want to receive events from someone's finger on the screen.
        scanHG.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int inType = scanHG.getInputType(); // backup the input type
                scanHG.setInputType(InputType.TYPE_NULL); // disable soft input
                scanHG.onTouchEvent(event); // call native handler
                scanHG.setInputType(inType); // restore input type
                return true; // consume touch even
            }
        });



        scanHG.addTextChangedListener(new TextWatcher() { // used for scanning the holograms
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {
            
            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                scanHGs = String.valueOf(charSequence).trim().replace(" ", "");
                int sizearray = ScannedArray.size();
                if (scanHGs.length() == 11) {
                    if (sizearray < Integer.parseInt(NoOfBottles)) {
                        String bid = "";
                        if (BottlingPlant_Idss.length() == 1) {
                            bid = "000" + BottlingPlant_Idss;
                        } else if (BottlingPlant_Idss.length() == 2) {
                            bid = "00" + BottlingPlant_Idss;
                        } else if (BottlingPlant_Idss.length() == 3) {
                            bid = "0" + BottlingPlant_Idss;
                        } else {
                            bid = BottlingPlant_Idss;
                        }

                        if (!ScannedArray.contains(scanHGs) && scanHGs.substring(0, 4) != bid) {
                            Collections.reverse(ScannedArray);
                            ScannedArray.add(scanHGs);
                            Collections.reverse(ScannedArray);
                            //Toast.makeText(CreateCase.this, "Valid barcode", Toast.LENGTH_SHORT).show();
                            scanHG.setText("");
                            label4.setText(ScannedArray.size()+ " / " +NoOfBottles);
                            recyclerView.setHasFixedSize(true);
                            layoutManager = new LinearLayoutManager(CreateCase.this);
                            recyclerView.setLayoutManager(layoutManager);
                            mAdapter = new MyAdapter(ScannedArray);
                            recyclerView.setAdapter(mAdapter);
                            errorLabel.setText("Valid barcode");
                            errorLabel.setBackgroundResource(R.color.green);
                            Helpers.ScanOk();
                            if (ScannedArray.size() == Integer.parseInt(NoOfBottles)) {
                                errorLabel.setText(NoOfBottles + "Hologram scanning Completed");
                                errorLabel.setBackgroundResource(R.color.green);
                                Helpers.ScanOk();
                                //Toast.makeText(CreateCase.this, NoOfBottles + " Hologram scanning Completed", Toast.LENGTH_SHORT).show();
                                Toast.makeText(CreateCase.this, "Please scan the case no.", Toast.LENGTH_SHORT).show();
                                //scanNo.setEnabled(true);
                                scanHG.setEnabled(false);
                             new duplicateHolo().execute();
                                //scanNo.requestFocus();
                              //  SendData();

                            }

                        } else {
                            errorLabel.setText("Duplicate barcode");
                            errorLabel.setBackgroundResource(R.color.red);
                            Helpers.ScanError();
                            scanHG.setText("");
                            Toast.makeText(CreateCase.this, "Not valid barcode", Toast.LENGTH_LONG).show();
                        }
                    } else {
                        errorLabel.setText("Package completed can't add more");
                        errorLabel.setBackgroundResource(R.color.red);
                        Helpers.ScanError();
                        scanHG.setText("");
                        Toast.makeText(CreateCase.this, "Package completed can't add more", Toast.LENGTH_SHORT).show();
                    }
                }else if(scanHGs.length() >= 11){
                    errorLabel.setText("Please enter valid barcode");
                    errorLabel.setBackgroundResource(R.color.red);
                    Helpers.ScanError();
                    scanHG.setText("");
                    Toast.makeText(CreateCase.this, "Package completed can't add more", Toast.LENGTH_SHORT).show();
                }
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });


        //loadHG(NoOfBottles);
        // getServerTimePostRequest("select now()");
        new getServerTimePostRequest("select now()").execute();
        //   getServerTimePostRequest("select", "select now()", "");
    }

    private void getCaseCount() {

        String query = "";
        query = "select count(case_no) as case_cont FROM case_details where Batch_no = '"+Batch_no+"'";
        new getCaseCount(query).execute();
    }



    private class getCaseCount extends AsyncTask<String, Integer, String> {
        String query;
        String res = "", exceptionn;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
//            progressBar.setVisibility(View.VISIBLE);
        }

        public getCaseCount(String query) {
            this.query = query;
        }

        @Override
        protected String doInBackground(String... strings) {
            try {

                String url = "jdbc:mysql://" + sqlips + ":" + sqlports + "/" + sqldatabases;
                ActivityCompat.requestPermissions(CreateCase.this, new String[]{Manifest.permission.INTERNET}, PackageManager.PERMISSION_GRANTED);
                StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
                StrictMode.setThreadPolicy(policy);
                try {
                    Class.forName(Config.Classes);
                    connection = DriverManager.getConnection(url, sqlusernames, sqlpasswords);
                    Statement statement = (Statement) connection.createStatement();
                    ResultSet result = statement.executeQuery(query);
                    System.out.println("allDetails" + query);

                    while (result.next()) {
                        caseCount = result.getString("case_cont");
                    }
                    if (caseCount == null) {
                        res = "null";
                    } else {
                        res = "found";

                    }
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (SQLException throwables) {
                    exceptionn = throwables.getMessage();
                    res = "err" + exceptionn;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            return res;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            System.out.println(" DB response==> " + s);
            if (s.equals("null")) {
                System.out.println("case count not found");
                countCase.setText("0");

                Helpers.ScanError();
            } else  {
                System.out.println("case count found");
                countCase.setText(caseCount);

            }

        }
    }



    @Override
    public boolean onSupportNavigateUp() {
        finish();
        return true;
    }

//    @Override
//    protected void onResume() {
//        super.onResume();
//        String scanStatus = sharedpreferences.getString("scanStatus", "no");
//        if (scanStatus.equals("completed")) {
//            scanHG.setEnabled(true);
//            scanHG.requestFocus();
//            label4.setText("Total Scan 0 From " + NoOfBottles);
//            recyclerView.setHasFixedSize(true);
//            layoutManager = new LinearLayoutManager(CreateCase.this);
//            recyclerView.setLayoutManager(layoutManager);
//            ScannedArray = new ArrayList();
//            mAdapter = new MyAdapter(ScannedArray);
//            recyclerView.setAdapter(mAdapter);
//            editor.putString("scanStatus", "no").commit();
//            if (activities.equals("reverse_scanning")) {
//                rev_layout.setVisibility(View.VISIBLE);
//                countSize = sharedpreferences.getInt("countSize", 0);
//                case_pallete_label.setText(countSize + " / " + rev_sizes);
//            }
//        }
//    }

    public void loadHG(int noofbot) { // only used while testing the app, as it loads the holograms automatically
        for (int i = 1; i < noofbot; i++) {
            String itrations = String.valueOf(i);
            if (itrations.length() < 2)
                ScannedArray.add(scanHGs + "0" + i);
            else
                ScannedArray.add(scanHGs + i);
        }
        recyclerView.setHasFixedSize(true);
        layoutManager = new LinearLayoutManager(CreateCase.this);
        recyclerView.setLayoutManager(layoutManager);
        Collections.reverse(ScannedArray);
        mAdapter = new MyAdapter(ScannedArray);
        recyclerView.setAdapter(mAdapter);
    }

    public void SendData() { // function used to send the intent with data
        Intent intent = new Intent(CreateCase.this, CreateScanCase.class);
        intent.putExtra("SupplierId", SupplierId);
        intent.putExtra("SupplierRegistrationNo", SupplierRegistrationNo);
        intent.putExtra("BrandId", BrandId);
        intent.putExtra("LabelId", LabelId);
        intent.putExtra("UnitId", UnitId);
        intent.putExtra("FinancialYear", FinancialYear);
        intent.putExtra("Mfg_dt", Mfg_dt);
        intent.putExtra("Batch_no", Batch_no);
        intent.putExtra("BottlingPlant_Ids", BottlingPlant_Ids);
        intent.putExtra("CurrentDateTime", CurrentDateTime);
        intent.putExtra("NoOfBottles", NoOfBottles);
        intent.putExtra("ScannedArray", ScannedArray);
        intent.putExtra("Label1", Label1);
        if (activities.equals("reverse_scanning")) {
            intent.putExtra("rev_palette_nos", rev_palette_nos);
            intent.putExtra("rev_sizes", rev_sizes);
            intent.putExtra("rev_ids", rev_ids);
            intent.putExtra("rev_palette_status", rev_palette_status);
            intent.putExtra("rev_BrandId", rev_BrandId);
            intent.putExtra("rev_LabelId", rev_LabelId);
            intent.putExtra("rev_UnitId", rev_UnitId);
            intent.putExtra("activities", activities);
        } else if (activities.equals("normal_scanning")) {
            intent.putExtra("activities", "normal_scanning");
        }
        startActivity(intent);
    }

    public class MyAdapter extends RecyclerView.Adapter<CreateCase.MyAdapter.MyViewHolder> { // adapter for recyclerview
        private ArrayList mDataset;
        int index;

        // Provide a reference to the views for each data item
        // Complex data items may need more than one view per item, and
        // you provide access to all the views for a data item in a view holder
        public class MyViewHolder extends RecyclerView.ViewHolder {
            // each data item is just a string in this case
            public TextView textView;

            public MyViewHolder(TextView v) {
                super(v);
                textView = v;
            }
        }

        // Provide a suitable constructor (depends on the kind of dataset)
        public MyAdapter(ArrayList myDataset) {
            mDataset = myDataset;
        }

        // Create new views (invoked by the layout manager)
        @Override
        public CreateCase.MyAdapter.MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            // create a new view
            TextView v = (TextView) LayoutInflater.from(parent.getContext())
                    .inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);

            CreateCase.MyAdapter.MyViewHolder vh = new CreateCase.MyAdapter.MyViewHolder(v);
            return vh;
        }

        // Replace the contents of a view (invoked by the layout manager)
        @Override
        public void onBindViewHolder(CreateCase.MyAdapter.MyViewHolder holder, int position) {
            // - get element from your dataset at this position
            // - replace the contents of the view with that element

            holder.textView.setText("HG ID : " + mDataset.get(position).toString());
            holder.textView.setBackgroundResource(R.drawable.row_border);

        }

        // Return the size of your dataset (invoked by the layout manager)
        @Override
        public int getItemCount() {
            return mDataset.size();
        }
    }


    /////////////////////////////SQL JDBC///////////////////////////////



    private class getServerTimePostRequest extends AsyncTask<String, Integer, String> {
        String query;

        public getServerTimePostRequest(String query){
            this.query=query;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();

//            progressBar.setVisibility(View.VISIBLE);
        }

        @Override
        protected String doInBackground(String... strings) {
            try {
                String url = "jdbc:mysql://" + sqlips + ":" + sqlports + "/" + sqldatabases;
                ActivityCompat.requestPermissions(CreateCase.this, new String[]{Manifest.permission.INTERNET}, PackageManager.PERMISSION_GRANTED);
                StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
                StrictMode.setThreadPolicy(policy);
                try {
                    ArrayList<String> printer = new ArrayList<>();
                    String printerData = null;
                    Class.forName(Config.Classes);
                    connection = DriverManager.getConnection(url, sqlusernames, sqlpasswords);
                    Statement statement = (Statement) connection.createStatement();
                    ResultSet result = statement.executeQuery(query);

                    while (result.next()) {
                        CurrentDateTime = result.getString("now()");

                    }

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            return null;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
//            progressBar.setVisibility(View.GONE);
        }
    }

    protected void onResume() {
        super.onResume();

        //getting data from shared preference
        sharedpreferences = getSharedPreferences(MainActivity.MyPREFERENCES, Context.MODE_PRIVATE);
        editor = sharedpreferences.edit();
        SelectedTypes = sharedpreferences.getString("SelectedType", "foreign liquor");

        // getting data from another activity
        Intent intent = getIntent();
        if (SelectedTypes.equals("foreign liquor")) {
            BrandId = intent.getStringExtra("BrandId");
        }
        back = intent.getStringExtra("back");
        SupplierId = intent.getStringExtra("SupplierId");
        SupplierRegistrationNo = intent.getStringExtra("SupplierRegistrationNo");
        BottlingPlant_Ids = intent.getStringExtra("BottlingPlant_Id");

        LabelId = intent.getStringExtra("LabelId");
        UnitId = intent.getStringExtra("UnitId");
        if(back == null){
            NoOfBottles = intent.getStringExtra("NoOfBottles");

        }else{
            NoOfBottles = intent.getStringExtra("NoOfBottles");

        }
        FinancialYear = intent.getStringExtra("FinancialYear");
        Mfg_dt = intent.getStringExtra("Mfg_dt");
        Batch_no = intent.getStringExtra("Batch_no");
        Label1 = intent.getStringExtra("Label1");
        Label4 = intent.getStringExtra("Label4");

        label1.setText(Label1);
        label4.setText(Label4);
        scanHG.requestFocus();

        activities = intent.getStringExtra("activities");
        if(activities.equals("reverse_scanning")){
            rev_palette_nos = intent.getStringExtra("rev_palette_nos");
            rev_sizes = intent.getStringExtra("rev_sizes");
            rev_ids = intent.getStringExtra("rev_ids");
            rev_palette_status = intent.getStringExtra("rev_palette_status");
            rev_BrandId = intent.getStringExtra("rev_BrandId");
            rev_LabelId = intent.getStringExtra("rev_LabelId");
            rev_UnitId = intent.getStringExtra("rev_UnitId");
            countSize = intent.getIntExtra("countSize",0);
        }

        // used for blocking the keyboard

        // mc 36 and tc 21

        scanHG.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int inType = scanHG.getInputType(); // backup the input type
                scanHG.setInputType(InputType.TYPE_NULL); // disable soft input
                scanHG.onTouchEvent(event); // call native handler
                scanHG.setInputType(inType); // restore input type
                return true; // consume touch even
            }
        });
    }

    @Override
    protected void onPause() {
        super.onPause();
        //getting data from shared preference
        sharedpreferences = getSharedPreferences(MainActivity.MyPREFERENCES, Context.MODE_PRIVATE);
        editor = sharedpreferences.edit();
        SelectedTypes = sharedpreferences.getString("SelectedType", "foreign liquor");

        // getting data from another activity
        Intent intent = getIntent();
        if (SelectedTypes.equals("foreign liquor")) {
            BrandId = intent.getStringExtra("BrandId");
        }
        back = intent.getStringExtra("back");
        SupplierId = intent.getStringExtra("SupplierId");
        SupplierRegistrationNo = intent.getStringExtra("SupplierRegistrationNo");
        BottlingPlant_Ids = intent.getStringExtra("BottlingPlant_Id");

        LabelId = intent.getStringExtra("LabelId");
        UnitId = intent.getStringExtra("UnitId");
        if(back == null){
            NoOfBottles = intent.getStringExtra("NoOfBottles");

        }else{
            NoOfBottles = intent.getStringExtra("NoOfBottles");

        }
        FinancialYear = intent.getStringExtra("FinancialYear");
        Mfg_dt = intent.getStringExtra("Mfg_dt");
        Batch_no = intent.getStringExtra("Batch_no");
        Label1 = intent.getStringExtra("Label1");
        Label4 = intent.getStringExtra("Label4");

        label1.setText(Label1);
        label4.setText(Label4);
        scanHG.requestFocus();

        activities = intent.getStringExtra("activities");
        if(activities.equals("reverse_scanning")){
            rev_palette_nos = intent.getStringExtra("rev_palette_nos");
            rev_sizes = intent.getStringExtra("rev_sizes");
            rev_ids = intent.getStringExtra("rev_ids");
            rev_palette_status = intent.getStringExtra("rev_palette_status");
            rev_BrandId = intent.getStringExtra("rev_BrandId");
            rev_LabelId = intent.getStringExtra("rev_LabelId");
            rev_UnitId = intent.getStringExtra("rev_UnitId");
            countSize = intent.getIntExtra("countSize",0);
        }

        // used for blocking the keyboard

        // mc 36 and tc 21

        scanHG.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int inType = scanHG.getInputType(); // backup the input type
                scanHG.setInputType(InputType.TYPE_NULL); // disable soft input
                scanHG.onTouchEvent(event); // call native handler
                scanHG.setInputType(inType); // restore input type
                return true; // consume touch even
            }
        });
    }

    @Override
    protected void onStart() {
        IntentFilter intentFilter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
        registerReceiver(networkChangeListener,intentFilter);
        super.onStart();
        //getting data from shared preference
        sharedpreferences = getSharedPreferences(MainActivity.MyPREFERENCES, Context.MODE_PRIVATE);
        editor = sharedpreferences.edit();
        SelectedTypes = sharedpreferences.getString("SelectedType", "foreign liquor");

        // getting data from another activity
        Intent intent = getIntent();
        if (SelectedTypes.equals("foreign liquor")) {
            BrandId = intent.getStringExtra("BrandId");
        }
        back = intent.getStringExtra("back");
        SupplierId = intent.getStringExtra("SupplierId");
        SupplierRegistrationNo = intent.getStringExtra("SupplierRegistrationNo");
        BottlingPlant_Ids = intent.getStringExtra("BottlingPlant_Id");

        LabelId = intent.getStringExtra("LabelId");
        UnitId = intent.getStringExtra("UnitId");
        if(back == null){
            NoOfBottles = intent.getStringExtra("NoOfBottles");

        }else{
            NoOfBottles = intent.getStringExtra("NoOfBottles");

        }
        FinancialYear = intent.getStringExtra("FinancialYear");
        Mfg_dt = intent.getStringExtra("Mfg_dt");
        Batch_no = intent.getStringExtra("Batch_no");
        Label1 = intent.getStringExtra("Label1");
        Label4 = intent.getStringExtra("Label4");

        label1.setText(Label1);
        label4.setText(Label4);
        scanHG.requestFocus();

        activities = intent.getStringExtra("activities");
        if(activities.equals("reverse_scanning")){
            rev_palette_nos = intent.getStringExtra("rev_palette_nos");
            rev_sizes = intent.getStringExtra("rev_sizes");
            rev_ids = intent.getStringExtra("rev_ids");
            rev_palette_status = intent.getStringExtra("rev_palette_status");
            rev_BrandId = intent.getStringExtra("rev_BrandId");
            rev_LabelId = intent.getStringExtra("rev_LabelId");
            rev_UnitId = intent.getStringExtra("rev_UnitId");
            countSize = intent.getIntExtra("countSize",0);
        }

        // used for blocking the keyboard

        // mc 36 and tc 21

        scanHG.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                int inType = scanHG.getInputType(); // backup the input type
                scanHG.setInputType(InputType.TYPE_NULL); // disable soft input
                scanHG.onTouchEvent(event); // call native handler
                scanHG.setInputType(inType); // restore input type
                return true; // consume touch even
            }
        });
    }


    private long startDataUsageMeasurement() {
        return TrafficStats.getTotalRxBytes() + TrafficStats.getTotalTxBytes();
    }

    private long stopDataUsageMeasurement(long startDataUsage) {
        long endDataUsage = TrafficStats.getTotalRxBytes() + TrafficStats.getTotalTxBytes();
        return endDataUsage - startDataUsage;
    }


    String hgvalue;
    String queryy ="";
    String HG_Serial_No;
    List<String> allDupHg = new ArrayList<>();
    private class duplicateHolo extends AsyncTask<String,Integer,String>{

        String messages;
        long startDataUsage;

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            startDataUsage = startDataUsageMeasurement();
            progressBar.setVisibility(View.VISIBLE);
        }

        @Override
        protected String doInBackground(String... strings) {

            for (int i = 0; i < ScannedArray.size(); i++) {
                hgvalue = ScannedArray.get(i).toString();


                if (SelectedTypes.equals("foreign liquor")) {
                    if (queryy.equals("")) {

                        queryy="select HG_Serial_No from aggregation where HG_Serial_No in ('" + hgvalue + "',";

                    } else {
                        queryy += "'" + hgvalue + "',";
                    }
                } else {
                    if (queryy.equals("")) {
                        queryy="select HG_Serial_No from aggregation where HG_Serial_No in ('" + hgvalue + "',";

                    } else {
                        queryy += "'" + hgvalue + "',";
                    }
                }

                System.out.println("ooooooooooo"+hgvalue);

            }
            if (!queryy.equals("")) {
                queryy = queryy.substring(0, queryy.length() - 1) + ")";
            }
            System.out.println("ooooooooooo"+queryy);


            String url = "jdbc:mysql://" + sqlips + ":" + sqlports + "/" + sqldatabases;
            ActivityCompat.requestPermissions(CreateCase.this, new String[]{Manifest.permission.INTERNET}, PackageManager.PERMISSION_GRANTED);
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
            try {
                long startTime = new Date().getTime();
                Class.forName(Config.Classes);
                connection = DriverManager.getConnection(url, sqlusernames, sqlpasswords);
                Statement statement = (Statement) connection.createStatement();
                ResultSet result = statement.executeQuery(queryy);
                long endTime = new Date().getTime();
                 executionTime = endTime - startTime;
                performSpeedTest();
                System.out.println("Query execution time: " + executionTime + " milliseconds");
                while (result.next()){
                    HG_Serial_No = result.getString("HG_Serial_No");
                    allDupHg.add(HG_Serial_No);
                }

                System.out.println("ooooooooooo"+allDupHg.toString());

                if(HG_Serial_No == null){
                     messages = "nothing";
                }else{
                    messages = "Found"+allDupHg.toString();
                }
            }catch (Exception e){
                e.printStackTrace();

            }
                return messages;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressBar.setVisibility(View.GONE);
            System.out.println("ooooooooooo"+s);

            if(s.equals("nothing")){

                SendData();
                long dataSize = stopDataUsageMeasurement(startDataUsage);
                // Your existing logic, and pass dataSize to writeToLogFile
                writeToLogFile("\nQuery execution time Hologram Scanning: " + executionTime + " milliseconds", dataSize);
                writeToLogFile("\nInternet Speed: " + getDownloadSpeed() + " bps", startDataUsage);
            }else if( s.equals("Found"+allDupHg.toString())){
                errorLabel.setText("Duplicate Found"+allDupHg.toString());
                errorLabel.setBackgroundResource(R.color.red);
                Helpers.ScanError();
                new checkCaseDetailsTable(allDupHg.toString()).execute();
            }
        }
    }


    private void performSpeedTest() {
        // Use a URL to a known file (e.g., a large file) for the speed test
        String testFileUrl = "http://ipv4.ikoula.testdebit.info/100M.iso";

        try {
            URL url = new URL(testFileUrl);
            URLConnection connection = url.openConnection();
            InputStream inputStream = connection.getInputStream();

            byte[] buffer = new byte[1024];
            int bytesRead;
            long startTime = System.currentTimeMillis();

            while ((bytesRead = inputStream.read(buffer)) != -1) {
                // Downloading data, but we're not storing it
            }

            long endTime = System.currentTimeMillis();
            executionTime = endTime - startTime;

            inputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private float getDownloadSpeed() {
        // Calculate download speed manually
        float speedKbps = 0.0f;

        if (executionTime > 0) {
            long dataSizeBytes = 1024 * 1024 * 10; // Size of the downloaded file in bytes (adjust as needed)
            speedKbps = ((float) dataSizeBytes / 1024) / (executionTime / 1000);
        }

        return speedKbps;
    }


    private void writeToLogFile(String logMessage, long dataSize) {
        try {
            // Create a SimpleDateFormat object for formatting date and time
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());

            // Get the current date and time
            String dateTime = dateFormat.format(new Date());

            // Create a File object representing the Download folder
            File downloadFolder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);

            // Create the log.txt file in the Download folder
            File logFile = new File(downloadFolder, "log.txt");

            // Open the FileOutputStream for the log.txt file
            FileOutputStream fos = new FileOutputStream(logFile, true);

            fos.write((dateTime + " " + logMessage + "\n").getBytes());

            fos.close();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @Override
    protected void onStop() {
        unregisterReceiver(networkChangeListener);
        super.onStop();
    }

    String str;
    private class checkCaseDetailsTable extends AsyncTask<String,Integer,String>{

        String holoGram;
        String messages;
        String query,queryyy;
        String casee_noo,case_noo;
      //  int row;

        public checkCaseDetailsTable(String holoGram){
            this.holoGram=holoGram;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressBar.setVisibility(View.VISIBLE);
        }

        @Override
        protected String doInBackground(String... strings) {

            System.out.println("holo"+holoGram.toString());
             str = holoGram.toString();
            str = str.replaceAll("\\[", "(").replaceAll("\\]",")");
            System.out.println("holo"+str);

            query = "select Case_No from aggregation where HG_Serial_No in "+str+"";
            System.out.println("holo"+query);

            String url = "jdbc:mysql://" + sqlips + ":" + sqlports + "/" + sqldatabases;
            ActivityCompat.requestPermissions(CreateCase.this, new String[]{Manifest.permission.INTERNET}, PackageManager.PERMISSION_GRANTED);
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
            try {

                Class.forName(Config.Classes);
                connection = DriverManager.getConnection(url, sqlusernames, sqlpasswords);
                Statement statement = (Statement) connection.createStatement();
                ResultSet result = statement.executeQuery(query);
                while (result.next()){
                    casee_noo = result.getString("Case_No");
                }
                queryyy = "SELECT case_no FROM case_details where case_no='"+casee_noo+"';";
                System.out.println("holo"+queryyy);
                Statement statement2 = (Statement) connection.createStatement();

                ResultSet result2 = statement2.executeQuery(queryyy);
                //System.out.println("holo"+row);

                while (result2.next()){
                    case_noo = result2.getString("case_no");

                }

                if(case_noo == null){

                    messages = "case not available";

                }else{
                    messages = "case availble";
                }

            }catch (Exception e){
                e.printStackTrace();
            }

            return messages;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressBar.setVisibility(View.GONE);
            if(s.equals("case not available")){

              new deleteHolo(casee_noo).execute();

            }else if(s.equals("case availble")){

                errorLabel.setText("Case is already aggregated");
                errorLabel.setBackgroundResource(R.color.red);
                Helpers.ScanError();
            }
        }
    }

    private class deleteHolo extends AsyncTask<String,Integer,String>{

        String caseNO;
        String query;
         String messages;

        public deleteHolo(String caseNO){
            this.caseNO=caseNO;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progressBar.setVisibility(View.VISIBLE);
        }

        @Override
        protected String doInBackground(String... strings) {

            query = "delete from aggregation where Case_No = "+caseNO+"";
            System.out.println("aaa"+query);

            String url = "jdbc:mysql://" + sqlips + ":" + sqlports + "/" + sqldatabases;
            ActivityCompat.requestPermissions(CreateCase.this, new String[]{Manifest.permission.INTERNET}, PackageManager.PERMISSION_GRANTED);
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
            try {

                Class.forName(Config.Classes);
                connection = DriverManager.getConnection(url, sqlusernames, sqlpasswords);
                Statement statement = (Statement) connection.createStatement();
                 statement.executeUpdate(query);

                    messages = "row deleted";

            }catch (Exception e){
                e.printStackTrace();
            }
            return messages;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            progressBar.setVisibility(View.GONE);

            if(s.equals("row deleted")){
                errorLabel.setText("Rescan the Hologram again");
                errorLabel.setBackgroundResource(R.color.red);
                Helpers.ScanError();
                Intent i = new Intent(getApplicationContext(),CreateCase.class);
                i.putExtra("SupplierId",  intent.getStringExtra("SupplierId"));
                i.putExtra("SupplierRegistrationNo", intent.getStringExtra("SupplierRegistrationNo"));
                i.putExtra("BottlingPlant_Id", intent.getStringExtra("BottlingPlant_Id"));
                i.putExtra("LabelId", intent.getStringExtra("LabelId"));
                i.putExtra("UnitId", intent.getStringExtra("UnitId"));
                i.putExtra("NoOfBottles", NoOfBottles);
                i.putExtra("back","back");
                i.putExtra("FinancialYear", intent.getStringExtra("FinancialYear"));
                i.putExtra("Mfg_dt", intent.getStringExtra("Mfg_dt"));
                i.putExtra("Batch_no", intent.getStringExtra("Batch_no"));
                i.putExtra("Label1", intent.getStringExtra("Label1"));
                i.putExtra("Label4", intent.getStringExtra("Label4"));
                i.putExtra("activities", intent.getStringExtra("activities"));
                i.putExtra("rev_palette_nos",  intent.getStringExtra("rev_palette_nos"));
                i.putExtra("rev_sizes", intent.getStringExtra("rev_sizes"));
                i.putExtra("rev_ids", intent.getStringExtra("rev_ids"));
                i.putExtra("rev_palette_status",  intent.getStringExtra("rev_palette_status"));
                i.putExtra("rev_BrandId",  intent.getStringExtra("rev_BrandId"));
                i.putExtra("rev_LabelId",intent.getStringExtra("rev_LabelId"));
                i.putExtra("rev_UnitId", intent.getStringExtra("rev_UnitId"));
                i.putExtra("countSize", intent.getStringExtra("countSize"));
                i.putExtra("BrandId",  intent.getStringExtra("BrandId"));

                startActivity(i);
                finish();
            }
        }
    }



}